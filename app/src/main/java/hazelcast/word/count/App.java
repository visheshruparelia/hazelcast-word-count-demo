/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hazelcast.word.count;

import com.hazelcast.client.HazelcastClient;
import com.hazelcast.client.config.ClientConfig;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.jet.Job;
import com.hazelcast.jet.config.JobConfig;
import com.hazelcast.jet.config.ProcessingGuarantee;
import com.hazelcast.jet.core.metrics.JobMetrics;
import com.hazelcast.jet.core.metrics.Measurement;
import com.hazelcast.jet.core.metrics.MetricTags;
import com.hazelcast.jet.pipeline.Pipeline;

import java.nio.channels.Pipe;
import java.util.stream.Stream;

public class App {

    public static void main(String[] args) throws InterruptedException {
        ClientConfig clientConfig = getHazelcastClientConfig();
        HazelcastInstance hazelcastInstance = HazelcastClient.newHazelcastClient(clientConfig);
        JobConfig jobConfig = getJobConfig();
        Pipeline pipeline = PipelineProvider.getWordCountPipeline();
        Job job = hazelcastInstance.getJet().newJob(pipeline, jobConfig);
        // Print the job metrics periodically.
        while (true) {
            JobMetrics jobMetrics = job.getMetrics();
            String vertexName = "KafkaSource";
            Long received =
                    jobMetrics.get("receivedCount").stream()
                            .filter(item -> vertexName.equals(item.tag(MetricTags.VERTEX)))
                            .mapToLong(Measurement::value)
                            .sum();
            Long emitted =
                    jobMetrics.get("emittedCount").stream()
                            .filter(item -> vertexName.equals(item.tag(MetricTags.VERTEX)))
                            .mapToLong(Measurement::value)
                            .sum();
            StringBuilder sb = new StringBuilder();
            sb.append(" Vertex Name ").append(vertexName);
            sb.append(" Received Sentences ").append(received);
            sb.append(" Emitted Sentences ").append(emitted);
            System.out.println(sb);
            Thread.sleep(60 * 1000);
        }
    }

    /**
     * Generate the Hazelcast client config. We will use this config to connect to the Hazelcast cluster and submit the word-count job to it.
     * @return Hazelcast client config which contains connection details of the word-count cluster.
     */
    private static ClientConfig getHazelcastClientConfig() {
        ClientConfig clientConfig = new ClientConfig();
        clientConfig.getNetworkConfig().addAddress("127.0.0.1:5701");
        clientConfig.setClusterName("word-count");
        return clientConfig;
    }

    /**
     * Generate the Job config required to configure the job properties. Checkout the JobConfig class for all the possible configurations.
     * @return JobConfig object.
     */
    private static JobConfig getJobConfig() {
        return new JobConfig()
                .setProcessingGuarantee(ProcessingGuarantee.AT_LEAST_ONCE)
                .setName("word-count-stateless-job")
                .addClass(PipelineProvider.class);
    }
}
